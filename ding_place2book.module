<?php

/**
 * Implementation of hook_init().
 */
function ding_place2book_init() {
  drupal_add_css(drupal_get_path('module', 'ding_place2book') .'/css/ding_place2book.css');
}

/**
 * Implementation of hook_perm().
 */
function ding_place2book_perm() {
  return array(
    'administer place2book settings',
  );
}

/**
 * Implementation of hook_menu().
 */
function ding_place2book_menu() {
  $items = array();

  $items['admin/settings/ding/place2book'] = array(
    'title' => 'Place2book settings',
    'description' => 'Settings and defaults for Place2book integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_admin_settings_form'),
    'access arguments' => array('administer place2book settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/ding_place2book.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 *
 *
 */
function ding_place2book_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // We only handles event nodes.
  if ($node->type == "event") {
    switch ($op) {
      case 'view':
        if (isset($node->nid) && $node->nid) {
          $place2book_id = db_result(db_query('SELECT place2book_id
                                                 FROM {ding_place2book}
                                                WHERE nid = %d', $node->nid));
          if ($place2book_id) {
            $service_settings = variable_get(ding_place2book, array());
            $api_key = place2book_get_api_key($node->field_library_ref[0]['nid']);
            if ($api_key == NULL) {
              return;
            }

            $headers = array(
              'X-PLACE2BOOK-API-TOKEN' => $api_key,
              'X-PLACE2BOOK-EVENT-ID' => $place2book_id,
            );
            $p2b_result = drupal_http_request($service_settings['service_url'] . '/available_tickets', $headers, 'GET' );

            /**
             * REVIEW: Maybe move this to a theme function.
             */
            if ($p2b_result->headers['Sales-Status']) {
              if ($p2b_result->headers['Sales-Status'] == 'open' && $p2b_result->headers['Available-Tickets'] > 0) {
                $link = l(t('Book a ticket'), $p2b_result->headers['Location']);
                $infolink = '<div class="place2book order">' . $link . '</div>';
              }
              elseif ($p2b_result->headers['Available-Tickets'] == 0) {
                $infolink = '<div class="place2book info">' . t('There are no available tickets for this event') . '</div>';
              }
              elseif ($p2b_result->headers['Sales-Status'] == 'closed') {
                $infolink = '<div class="place2book info">' . t('The event is closed') . '</div>';
              }
            }

            /**
             * REVIEW: Maybe this should be made into a block og panel pane, so
             *         libraries have more freedom to place it one the page. This
             *         may also require changes in sub-themes.
             */
            $node->content['place2book_infolink'] = array(
              '#value' => $infolink,
              '#weight' => 10,
              );
            }
          }
        break;

      case insert:
        if ($node->place2book['maintain_copy'] == 1) {
          // Insert - maintain_copy and new event node.
          $place2book_id = place2book_event_op('insert', $node);
        }
      break;

      case update:
        // Get existing Place2book settings for this node.
        $settings = place2book_settings($node->nid);
        $place2book_id = isset($settings['place2book_id']) ? $settings['place2book_id'] : NULL;

        // Figure out if this is an update, delete or create. This is some what
        // complex because node may exists before this module is introduced.
        if ($node->place2book['maintain_copy'] == 1) {
          if ($settings['maintain_copy']) {
            // Update - maintain_copy and valided id
            place2book_event_op('update', $node, $place2book_id);
          }
          else {
            // Insert - maintain_copy and no id (or id -1 re-connect to place2book).
            place2book_event_op('insert', $node, $place2book_id);
          }
        }
        else {
          // Delete - don't maintain_copy
          place2book_event_op('delete', $node, $place2book_id);
        }
        break;

      case 'delete':
        /**
         * TODO: No attempt is currently made to stop the node from being
         *       deleted if the above place2book-delete fails...
         *
         * REVIEW: Maybe a clean-up check could be execute by the
         *         administrator or cron?
         */
        $place2book_id = db_result(db_query('SELECT place2book_id
                                               FROM {ding_place2book}
                                              WHERE nid = %d', $node->nid));
        if ($place2book_id) {
          place2book_event_op('delete', $node, $place2book_id);
          _place2book_db_op('delete', $node, $place2book_id);
        }
        break;
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function ding_place2book_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'event_node_form') {
    // Get the nid in a PHP 5.3 safe way and load settings for this node.
    $nid = isset($form['nid']['#value']) ? $form['nid']['#value'] : NULL;
    $node_settings = place2book_settings($nid);

    // Service settings.
    $service_settings = variable_get(ding_place2book, array());
    if (empty($service_settings)) {
      drupal_set_message(t('You have not yet configured the Place2Book module'), 'WARNING', FALSE);
      return;
    }

    if ($node_settings['place2book_id'] && $node_settings['place2book_id'] != -1) {
      $p2b_link = l($node_settings['place2book_id'], $service_settings['event_url'] . '/' . $node_settings['place2book_id'], array('absolute' => TRUE));
      $p2b_info = t('Entry price is submitted to Place2book as the ticket type with name ADGANG. If more ticket types on this event is needed, go to Place2book ID !link. (Note: You may need to log on)', array('!link' => $link));
    }
    else {
      $p2b_link = t('None');
      $p2b_info = t('Entry price is submitted to Place2book as the ticket type with name ADGANG. If more ticket types on this event is needed, edit the corresponding event on Place2book after this event has been created.');
    }

    $form['place2book'] = array(
      '#type' => 'fieldset',
      '#title' => t('Place2Book'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 35,
      '#group' => 'additional_settings',
      '#tree' => TRUE,
    );

    /*
     * Move the two below back into the main form ?
     */
    $form['place2book']['entry_price_extra_info'] = array(
      '#value' => $p2b_info,
      '#weight' => -3,
    );

    $form['place2book']['capacity'] = array(
      '#type' => 'textfield',
      '#title' => t('Event capacity'),
      '#size' => 5,
      '#maxlength' => 5,
      '#default_value' => isset($node_settings['capacity']) ? $node_settings['capacity'] : $node_settings['defaults']['capacity'],
      '#description' => t('Optional. Maximum capacity on this event. Set to 0 for unlimited capacity.'),
      '#weight' => -2,
    );

    $form['place2book']['maintain_copy'] = array(
      '#type' => 'checkbox',
      '#title' => t('Maintain copy on Place2Book'),
      '#default_value' => isset($node_settings['maintain_copy']) ? $node_settings['maintain_copy'] : $node_settings['defaults']['maintain_copy'],
      '#description' => t('When set, a corresponding event is created and updated on the ticket booking service Place2Book.com.'),
    );

    $form['place2book']['place2book_id'] = array(
      '#type' => 'item',
      '#title' => t('Place2Book ID'),
      '#value' => $p2b_link,
      '#description' => t('An ID-reference to the corresponding event on the ticket booking service Place2Book'),
    );

    $form['place2book']['kultunaut_export'] = array(
      '#type' => 'checkbox',
      '#title' => t('Kultunaut export'),
      '#default_value' => isset($node_settings['kultunaut_export']) ? $node_settings['kultunaut_export'] : $node_settings['defaults']['kultunaut_export'],
      '#description' => t('If checked, Place2book will forward this ding-event to Kultunaut.'),
    );
  }
}

/**
 * Handles communitaction with the place2book web-services, which consists of
 * insert, update and delete opreations.
 *
 * @param string $op
 *  The operation to preform: insert, update or delete.
 * @param object $node
 *  A node object for the event.
 * @param int $place2book_id
 *  Place2Book identifier.
 * @return int
 *  Place2Book identifier.
 */
function place2book_event_op($op, $node, $place2book_id = NULL) {
  // Service settings.
  $service_settings = variable_get(ding_place2book, array());
  if (empty($service_settings)) {
    drupal_set_message(t('You have not yet configured the Place2Book module'), 'WARNING', FALSE);
    return;
  }

  // Build XML headers.
  $api_key = place2book_get_api_key($node->field_library_ref[0]['nid']);
  if ($api_key == NULL) {
    return;
  }
  $headers = array(
    'Content-Type' => 'text/xml',
    'X-PLACE2BOOK-API-TOKEN' => $api_key,
  );

  switch ($op) {
    case 'insert':
      $xml = place2book_build_xml($node, $service_settings);
      $req_result = drupal_http_request($service_settings['service_url'] . '/create_event', $headers, 'POST', $xml->asXML());

      // Catch insert error by checking the event id.
      if (!$req_result->headers['Event-Id']) {
        $p2b_error = $req_result->headers['Status'] . ' - ' . $req_result->headers['Error-Description'];
        drupal_set_message(t('The insert or update was not performed on Place2book. Place2book returned this error: ') . $p2b_error, 'error', FALSE);
      }
      else {
        drupal_set_message(t('Event created on Place2book with remote ID %id', array('%id' => $req_result->headers['Event-Id'])));

        // Update local database.
        if ($place2book_id != NULL) {
          _place2book_db_op('update', $node, $req_result->headers['Event-Id']);
        }
        else {
          _place2book_db_op('insert', $node, $req_result->headers['Event-Id']);
        }
      }
      break;

    case 'update':
      $xml = place2book_build_xml($node, $service_settings);
      $headers['X-PLACE2BOOK-EVENT-ID'] = $place2book_id;
      $req_result = drupal_http_request($service_settings['service_url'] . '/update_event', $headers, 'POST', $xml->asXML());

      // Catch update error by checking the return code.
      if ($req_result->error != 'Accepted') {
        $p2b_error = $req_result->headers['Status'] . ' - ' . $req_result->headers['Error-Description'];
        drupal_set_message(t('UPDATE was NOT PERFORMED on Place2book. Place2book returned this error: ') . $p2b_error, 'error', FALSE);
      }
      else {
        drupal_set_message(t('Event updated on Place2book with remote ID %id', array('%id' => $place2book_id)));

        // Update place2book settings table.
        _place2book_db_op('update', $node, $place2book_id);
      }
      break;

    case 'delete':
      $headers['X-PLACE2BOOK-EVENT-ID'] = $place2book_id;
      $req_result = drupal_http_request($service_settings['service_url'] . '/delete_event', $headers, 'POST');

      if ($req_result->error != 'Accepted') {
        $p2b_error = $req_result->headers['Status'];
        drupal_set_message(t('DELETE was NOT PERFORMED on Place2book. Place2book returned this error: ') . $p2b_error, 'error', FALSE);
      }
      else {
        drupal_set_message(t('The related event on Place2book was deleted.'));
        // Update settings in ding_place2book table - "break the maintain_copy link"
        _place2book_db_op('update', $node, -1);
      }

      // If server at p2b says 406 - Not Accepted, do this instead:
      // dont delete from ding_place2book
      // update table, set maintain_copy back to selected
      // message to user: server says no, some have already bought tickets
      break;

    default:
      watchdog('place2book', t('Unknown operation to place2book_event_op(): %op'), array('%op' => $op), WATCHDOG_ERROR);
  }

  // Return a place2book_id
  return $req_result->headers['Event-Id'];
}

/**
 * Builds XML message used to send to the place2book web-service.
 *
 * REVIEW: Maybe move this into a communication object and use the NanoSoap
 *         module as parent. NanoSoap is used by the ting-client to communicate
 *         with the data well.
 *
 * @param object $node
 *  A node object of node event type
 * @param array $service_settings
 *  Service configuration settings
 * @return object $xml
 *  SimpleXML object
 */
function place2book_build_xml($node, $service_settings) {
  // Load xml string
  $event_create_str = '<?xml version="1.0" encoding="UTF-8"?>
<data>
  <provider>
    <name></name>
    <email></email>
    <phone></phone>
  </provider>
  <event>
    <name></name>
    <description_short></description_short>
    <description_long></description_long>
    <begin_at></begin_at>
    <end_at></end_at>
    <sale_open></sale_open>
    <sale_close></sale_close>
    <venue>
      <name></name>
      <address1></address1>
      <address2></address2>
      <postal></postal>
      <city></city>
      <country_code></country_code>
    </venue>
    <capacity></capacity>
    <unlimited_capacity>1</unlimited_capacity>
    <price>
      <name>Adgang</name>
      <value>0</value>
    </price>
    <kultunaut_export></kultunaut_export>
    <kultunaut_age_group></kultunaut_age_group>
    <kultunaut_picture_uri></kultunaut_picture_uri>
    <kultunaut_export_category></kultunaut_export_category>
  </event>
    </data>';
  $xml = simplexml_load_string($event_create_str);

  // Set provider data from the settings.
  $xml->provider->name = $service_settings['provider_name'];
  $xml->provider->email = $service_settings['provider_mail'];

  // Set event name with title.
  $xml->event->name = $node->title;

  /**
   * REVIEW: This may have an max lenght of 255 chars.
   */
  // Set short description.
  $xml->event->description_short = $node->field_teaser[0]['value'];

  // Set long description.
  $xml->event->description_long = $node->body;

  // Set sales window times empty - and they will use the defaults in place2book.
  $xml->event->sale_open = '';
  $xml->event->sale_close = '';

  //-- set location data --
  // If library has been selected, use location data from the library.
  if ($node->field_library_ref[0]['nid']) {
    $libloc = db_fetch_array(db_query('SELECT n.title, l.name, l.street,
                                              l.additional, l.postal_code,
                                              l.city, UPPER(l.country)
                                           AS country
                                         FROM node n JOIN location_instance i
                                                       ON n.nid = i.nid JOIN location l
                                                       ON i.lid = l.lid
                                        WHERE n.nid = %d', $node->field_library_ref[0]['nid']));

    $xml->event->venue->name = $libloc['title'];
    $xml->event->venue->address1 = $libloc['street'];
    $xml->event->venue->address2 = $libloc['additional'];
    $xml->event->venue->postal = $libloc['postal_code'];
    $xml->event->venue->city = $libloc['city'];
    $xml->event->venue->country_code = $libloc['country'];
  }

  // If node provides other location data, override the above location data
  // where possible - NB: NOT OPTIMAL SOLUTION, since node lacks fields for
  // postal and city.
  //
  // The check is only made for venue name - if it is not there, the rest is not used either
  if (isset($node->locations[0]['name']) && $node->locations[0]['name']) {
    $xml->event->venue->name = $node->locations[0]['name'];
    $xml->event->venue->address1 = $node->locations[0]['street'];
    $xml->event->venue->address2 = $node->locations[0]['additional'];

    // NB! - event node type can have a funny default in it location settings
    // (see /admin/content/node-type/event, Locative Info., Collection settings)
    // - country default was US, should probably be DK. Perhaps a check should be made?
    $xml->event->venue->country_code = drupal_strtoupper($node->locations[0]['country']);
  }

  // Set capacity - and if provided, unflag unlimited_capacity.
  if (isset($node->place2book['capacity']) && $node->place2book['capacity'] > 0) {
    $xml->event->capacity = $node->place2book['capacity'];
    $xml->event->unlimited_capacity = 0;
  }

  // Set ticket price - multiplied by 100, Place2book receives amount in oere instead of kr.
  $xml->event->price->value = $node->field_entry_price[0]['value'] * 100;

  // Set event time to begin
  $xml->event->begin_at = $node->field_datetime[0]['value'];

  // Set event time to end
  $xml->event->end_at = $node->field_datetime[0]['value2'];

  // Set kultunaut_export setting
  $xml->event->kultunaut_export = $node->place2book['kultunaut_export'];

  // -- set kultunaut terms --
  $term_list = '';
  if ($node->taxonomy) {
    foreach ($node->taxonomy as $vid => $termid) {
      if (is_numeric($vid)) {
        $term_list = $term_list . $termid . ",";
      }
    }
    $term_list = rtrim($term_list, ",");
  }

  // I have the term ids already, so the following 2 queries will in turn give
  // me term names to use.
  if (!empty($term_list)) {
    $event_category = db_result(db_query('SELECT t.name
                                            FROM {term_data} t JOIN {vocabulary} v
                                                                 ON t.vid = v.vid
                                                              WHERE v.name = "Event category"
                                                                AND t.tid IN (' . $term_list . ')'));
    $xml->event->kultunaut_export_category = $event_category;

    /**
     * REVIEW: What should these values be, each library has thier own values
     *         for age groups.
     */
    $event_target = db_result(db_query('SELECT t.name
                                          FROM {term_data} t JOIN {vocabulary} v
                                                               ON t.vid = v.vid
                                                            WHERE v.name = "Event target"
                                                              AND t.tid IN (' . $term_list . ')'));
    $xml->event->kultunaut_age_group = $event_target;
  }

  // Set kultunaut picture URI
  if (isset($node->field_list_image[0]['filepath'])) {
    /**
     * REVIEW: This assums that all images are displayed using the same image
     *         style, should be moved to configuration.
     */
    $url = str_replace("files", "files/imagecache/120_120", $node->field_list_image[0]['filepath']);
    $xml->event->kultunaut_picture_uri = url($url, array('absolute' => TRUE));
  }
  return $xml;
}

/**
 * Loads default settings, if the an event already exists with the nid given the
 * settings for the event is loaded.
 */
function place2book_settings($nid = NULL) {
  // Get default values.
  $settings = variable_get('ding_place2book_event_nodes', array());

  // Check database for node specific settings, if nid is defined.
  if ($nid) {
    $result = db_fetch_array(db_query('SELECT *
                                         FROM {ding_place2book}
                                        WHERE nid = %d', $nid));
    if ($result) {
      $settings = $result;
    }
  }
  return $settings;
}

/**
 * Helper function that handles insert, update and delete database operations
 * for the local place2book settings table.
 *
 * @param string $op
 *  Operation to preform insert, update or delete
 * @param object $node
 *  Node event object
 * @param int $place2book_id
 *  Place2book identifier
 */
function _place2book_db_op($op, $node, $place2book_id = NULL) {
  switch ($op) {
    case 'insert':
      db_query('INSERT INTO {ding_place2book} (nid, place2book_id,
                                                 maintain_copy, capacity,
                                                 kultunaut_export)
                       VALUES (%d, %d, %d, %d, %d)', $node->nid,
                                                     $place2book_id,
                                                     $node->place2book['maintain_copy'],
                                                     $node->place2book['capacity'],
                                                     $node->place2book['kultunaut_export']);
      break;

    case 'update':
      db_query('UPDATE {ding_place2book}
                   SET place2book_id = %d,
                       maintain_copy = %d,
                            capacity = %d,
                    kultunaut_export = %d
                 WHERE nid = %d', $place2book_id,
                                  $node->place2book['maintain_copy'],
                                  $node->place2book['capacity'],
                                  $node->place2book['kultunaut_export'],
                                  $node->nid);
      break;

    case 'delete':
      db_query('DELETE FROM {ding_place2book}
                      WHERE nid = %d
                        AND place2book_id = %d', $node-nid, $place2book_id);
      break;

    default:
      watchdog('place2book', t('Unknown operation to _place2book_db_op(): %op'), array('%op' => $op), WATCHDOG_ERROR);
  }
}

/**
 * Load the API key for a given library, defined by the parameter, if non is
 * given the default API key is returned.
 *
 * @param int $library_id
 *  The nid for the library that has the current event.
 * @return string
 *  API key or NULL if configuration is not found.
 */
function place2book_get_api_key($library_id = NULL) {
  // Load configuration an the place2book global API key.
  $service_settings = variable_get(ding_place2book, array());
  if (empty($service_settings)) {
    drupal_set_message(t('You have not yet configured the Place2Book module'), 'WARNING', FALSE);
    return NULL;
  }

  // Check if the library as overriden the global API key.
  $api_key = $service_settings['api_key'];
  if ($library_id) {
    $library_keys = variable_get('ding_place2book_libraries', array());
    if (!empty($library_keys[$library_id])) {
      $api_key = $library_keys[$library_id];
    }
  }
  return $api_key;
}